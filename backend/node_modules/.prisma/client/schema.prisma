generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  role     Role
  bookings Booking[]
}

model Manager {
  id          Int    @id @default(autoincrement())
  fullName    String
  email       String
  phone       String
  theatreName String
}

model Theatre {
  id       Int     @id @default(autoincrement())
  name     String
  location String
  contact  String?
  shows    Show[]
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  language    String
  genre       String
  releaseDate DateTime
  duration    Int
  poster      String
  shows       Show[]
}

model Show {
  id             Int       @id @default(autoincrement())
  movieId        Int
  theatreId      Int
  availableSeats Int
  date           DateTime
  pricePerSeat   Float
  time           String
  totalSeats     Int
  bookings       Booking[]
  movie          Movie     @relation(fields: [movieId], references: [id])
  theatre        Theatre   @relation(fields: [theatreId], references: [id])
}

model Booking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  show      Show     @relation(fields: [showId], references: [id])
  showId    Int
  seats     String[]
  numSeats  Int
  amount    Float
  createdAt DateTime @default(now())
  payment   Payment? @relation("BookingPayment")
}

model Payment {
  id          Int      @id @default(autoincrement())
  method      String
  upiId       String?
  cardNumber  String?
  cardExpiry  String?
  cardCVV     String?
  amount      Float
  status      String   @default("PAID")
  paymentTime DateTime @default(now())
  booking     Booking  @relation("BookingPayment", fields: [bookingId], references: [id])
  bookingId   Int      @unique
}

enum Role {
  ADMIN
  MANAGER
  USER
}
